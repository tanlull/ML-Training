{
    "collab_server" : "",
    "contents" : "#### Install packages (comment out if not needed)\ninstall.packages('caret') # building model\ninstall.packages('e1071') # tree model\ninstall.packages('rpart.plot') # visualize tree\ninstall.packages('Hmisc') # describe\ninstall.packages(\"corrplot\") # For correlation plot\ninstall.packages(\"rpart\") \n\n\n#### loading packages\nlibrary(caret)\nlibrary(e1071)\nlibrary(rpart.plot)\nlibrary(Hmisc)\nlibrary(corrplot)\nlibrary(rpart)\n\n# 1. load dataset\ntrain_data <- read.csv('titanic_data/train.csv')\ntest_data <- read.csv('titanic_data/test.csv')\nstr(test_data)\nhead(train_data)\nhead(test_data)\n\n#### check the data\ndim(train_data)\n\n# 2. Explore data\nstr(train_data)\nsummary(train_data)\ndescribe(test_data)\n\n# correlation\ntrain_corr = cor(train_data[, c('Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare')],\n                 use = \"complete.obs\")\ncorrplot(train_corr)\n\n# 3. Clean Data\n\n# Clean train data\n\n#### create a copy of train data\ntrain_clean <- cbind(train_data)\n\n#### impute missing values\ntrain_clean[which(is.na(train_clean$Age)), 'Age'] <- mean(train_clean$Age, na.rm = TRUE)\ntrain_clean[which(is.na(train_clean$Fare)), 'Fare'] <- mean(train_clean$Fare, na.rm = TRUE)\n\n#### convert data type\ntrain_clean$Pclass <- as.factor(train_clean$Pclass)\ntrain_clean$Cabin <- as.character(train_clean$Cabin)\n\n#### For train data\ntrain_clean$Survived <- as.factor(train_clean$Survived)\n\n\n# 4. Train model: Decision Tree\nset.seed(1234)\ntree_model <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train_clean, \n                  method = \"rpart\",\n                  metric = \"Accuracy\",\n                  trControl = trainControl(method = \"repeatedcv\",\n                                           number = 5,\n                                           repeats = 1))\n\ntan_model <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train_clean, method=\"class\")\n\nprp(tan_model,type=2,cex=1,extra=104,fallen.leaves = T)\n\n#### visualize model\nrpart.plot(tree_model$finalModel)\n\n# 5. Train model : Random Forest\n# Optimize using Random Search\ntree_model_random <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,  \n                           data = train_clean, \n                           method = \"cforest\",  \n                           metric = \"Accuracy\", \n                           tuneLength = 5, #tune length \n                           trControl = trainControl(method = \"cv\",  \n                                                    number = 5,  \n                                                    search = \"random\", # random search \n                                                    verboseIter = T))\n\n# Print model\ntree_model_random\n\n#### Prepare test data\ntest_clean <- cleanData(test_data)\n\nsummary(test_clean)\n\n\n# 6. get prediction\n\n# Clean test data\n#### create a copy of test data\ntest_clean <- cbind(test_data)\n\n#### impute missing values\ntest_clean[which(is.na(test_clean$Age)), 'Age'] <- mean(test_clean$Age, na.rm = TRUE)\ntest_clean[which(is.na(test_clean$Fare)), 'Fare'] <- mean(test_clean$Fare, na.rm = TRUE)\n\n#### convert data type\ntest_clean$Pclass <- as.factor(test_clean$Pclass)\ntest_clean$Cabin <- as.character(test_clean$Cabin)\n\n# Get prediction\nprediction <- predict(tree_model_random, newdata = test_clean, type = \"raw\", na.action = )\nlength(prediction)\n\n# 7. export prediction\nanswers = data.frame(PassengerId = test_clean$PassengerId, Survived=prediction)\nanswers\nwrite.csv(answers, file=\"answers-workshop1_tan_random_all_parameter.csv\", row.names = FALSE)\n",
    "created" : 1519033631095.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "648483481",
    "id" : "DFEF1D8E",
    "lastKnownWriteTime" : 1519031977,
    "last_content_update" : 1519031977,
    "path" : "C:/Users/tan/Desktop/Kaggle/workshop1-titanic_tan.R",
    "project_path" : "workshop1-titanic_tan.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}